name: 'Reusable Terraform Creation Workflow'

on:
  workflow_call:
    inputs:
      terraform_vars:
        description: 'JSON string of Terraform variables as key-value pairs'
        required: false
        type: string
        default: '{}'      
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      TF_API_TOKEN:
        required: false
 

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

jobs:
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -input=false

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

  terraform-plan:
    name: 'Terraform Plan'
    needs: terraform-validate
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

    - name: Terraform Init
      run: terraform init -input=false

    - name: Generate Terraform Variables
      if: inputs.terraform_vars != '{}'
      run: |
        echo '${{ inputs.terraform_vars }}' | jq -r 'to_entries[] | "\(.key) = \"\(.value)\""' > terraform.tfvars

    - name: Terraform Plan
      id: plan
      run: |
        PLAN_ARGS="-input=false -detailed-exitcode"
               
        # Add generated tfvars if JSON vars were provided
        if [ "${{ inputs.terraform_vars }}" != "{}" ] && [ -f terraform.tfvars ]; then
          PLAN_ARGS="$PLAN_ARGS -var-file=terraform.tfvars"
        fi
        
        terraform plan $PLAN_ARGS
        echo "exitcode=$?" >> $GITHUB_OUTPUT
      continue-on-error: true
      
  terraform-apply:
    name: 'Terraform Apply'
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

    - name: Terraform Init
      run: terraform init -input=false

    - name: Generate Terraform Variables
      if: inputs.terraform_vars != '{}'
      run: |
        echo '${{ inputs.terraform_vars }}' | jq -r 'to_entries[] | "\(.key) = \"\(.value)\""' > terraform.tfvars

    - name: Terraform Apply
      run: |
        APPLY_ARGS="-auto-approve -input=false"
               
        # Add generated tfvars if JSON vars were provided
        if [ "${{ inputs.terraform_vars }}" != "{}" ] && [ -f terraform.tfvars ]; then
          APPLY_ARGS="$APPLY_ARGS -var-file=terraform.tfvars"
        fi
        
        terraform apply $APPLY_ARGS    