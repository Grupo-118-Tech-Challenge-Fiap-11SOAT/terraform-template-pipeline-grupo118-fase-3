name: 'Reusable Terraform Destroy Workflow'

on:
  workflow_call:
    inputs:
      terraform_var_mapping:
        description: 'JSON mapping of terraform variables to secret names'
        required: false
        type: string
        default: '{}'        
    secrets: {}  # No explicit secrets defined 

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

jobs:
  terraform-destroy:
    name: 'Terraform Destroy'
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -input=false

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Generate Terraform Variables from Secrets
      env:
        SECRETS_CONTEXT: ${{ toJson(secrets) }}
        VAR_MAPPING: ${{ inputs.terraform_var_mapping }}
      run: |
        # Create terraform.tfvars file
        echo "# Generated Terraform variables from secrets" > terraform.tfvars
        
        # Parse the mapping and generate variables
        echo "$VAR_MAPPING" | jq -r 'to_entries[] | "\(.key) \(.value)"' | while read tf_var secret_name; do
          # Get the secret value from the secrets context
          secret_value=$(echo "$SECRETS_CONTEXT" | jq -r --arg secret_name "$secret_name" '.[$secret_name] // empty')
          
          if [ -n "$secret_value" ] && [ "$secret_value" != "null" ]; then
            echo "${tf_var} = \"${secret_value}\"" >> terraform.tfvars
            echo "✓ Mapped secret '$secret_name' to terraform variable '$tf_var'"
          else
            echo "⚠️  Warning: Secret '$secret_name' not found or empty for terraform variable '$tf_var'"
          fi
        done
        
        echo "Generated terraform.tfvars:"
        # Show tfvars without values for security
        sed 's/=.*/= "[REDACTED]"/' terraform.tfvars

    - name: Terraform Destroy
      id: apply
      run: |
        APPLY_ARGS="-auto-approve -input=false"
        
        # Add terraform.tfvars if it exists and has content
        if [ -f terraform.tfvars ] && [ -s terraform.tfvars ]; then
          APPLY_ARGS="$APPLY_ARGS -var-file=terraform.tfvars"
        fi

        echo "Running: terraform destroy $APPLY_ARGS"

        terraform destroy $APPLY_ARGS